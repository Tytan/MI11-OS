###############################################################################
# OpenOCD configuration file for the Armadeus APF9328 module
#
# This is a TCL script executed in order
#
# v2.1 - S. Bonnet 2015
###############################################################################

telnet_port 4444
gdb_port pipe

gdb_memory_map enable
gdb_flash_program enable
gdb_report_data_abort disable

interface ftdi
ftdi_vid_pid 0x0403 0x6010
ftdi_layout_init 0x0088 0x008b
adapter_khz 6000

# The FPGA - Comment if not present!
# Simply add a new tap
jtag newtap xc3s200 fpga -irlen 6 -irmask 0x3 -ircapture 0x1 -expected-id 0x01414093

# The CPU - mc9328mxl
set _CHIPNAME mc9328mxl
set _ENDIAN little

# There is only one TAP
set _CPUTAPID 0x1092001d

jtag newtap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID

# Create the GDB target
set _TARGETNAME $_CHIPNAME.cpu
target create $_TARGETNAME arm920t -endian $_ENDIAN -chain-position $_TARGETNAME

# Enable dcc transfers
arm7_9 dcc_downloads enable
arm7_9 fast_memory_access enable

arm7_9 dbgrq enable

# MC9328MXl does not have any internal memory => use 64K SDRAM as work memory
# Works iif init done
$_TARGETNAME configure -work-area-virt 0x08ff0000 -work-area-phys 0x08ff0000 \
		-work-area-size 0x10000 -work-area-backup 1

# The NOR Flash memory - Mapped to 0x10000000 physical iif init done
# 16 Mbytes
flash bank bank0 cfi 0x10000000 0x01000000 2 2 $_TARGETNAME

# The NOR Flash memory - 1Mo of bank0 mapped to address 0
flash bank boot cfi 0x00000000 0x00100000 2 2 $_TARGETNAME

# Configure the event handlers. Essential for the reset to work properly.
# Event handlers 
$_TARGETNAME configure -event reset-assert mc9328_reset_assert
$_TARGETNAME configure -event reset-deassert-post mc9328_reset_deassert_post
$_TARGETNAME configure -event reset-init apf9328_init
$_TARGETNAME configure -event gdb-attach gdb_attach


# RESET PROCESSING ############################################################
#
# This is quite complicated as the board does not support SRST. We have to use
# the watchdog to force the MC9328MX to reset itself.
###############################################################################

global mc9328_target_name
set mc9328_target_name $_TARGETNAME

# Keep the argument to the reset command to know if we should resume the target
global mc9328_reset_mode
set mc9328_reset_mode ""

# Returns 0 if the target is halted.
proc mc9328_is_halted {} {
	global mc9328_target_name
	
	return [expr [string compare [$mc9328_target_name curstate] "halted" ] == 0]
}
	

proc mc9328_reset_assert {} {
	# Use the vector_catch feature to catch the reset vector
	arm9 vector_catch reset
	
	# Halt the target (always works at this point)
	poll on
	halt

	# Program the watchdog to trigger as soon as the target is resumed
	mww phys 0x201000 0x101
	
	# Resume the target. It will be halted when the reset vector is caught.
	resume
}

proc mc9328_reset_deassert_post {} {
	global mc9328_reset_mode
	global mc9328_target_name

	# Check the target has halted
	while { ! [mc9328_is_halted] } {
		sleep 100
	} 
	
	# Remove the reset catch
	arm9 vector_catch none

	# Resume the target if requested.
	if { [string compare $mc9328_reset_mode "run"] == 0 } {
		echo "resuming"
		resume
	}
}

# Override the init_reset{mode} proc to get the mode parameter
proc init_reset {mode} {
	# Slow down the adapter as the PLL will be reset to its 32kHz default
	adapter_khz 500
	global mc9328_reset_mode

	set mc9328_reset_mode $mode
	
	jtag arp_init-reset
}

# Initialize the target when gdb attaches
proc gdb_attach {} {
	reset init
}

# Low level initialisation. ################################################### 
# Set ups:
#   - CPU clocks
#   - Flash location in memory map
#   - SDRAM timings
###############################################################################
proc apf9328_init {} {
	puts "Initial board configuration"
	if { [mc9328_is_halted] == 0 } {
		puts "The target is still running, no initialization will be performed."
	}

	# Setup PLL and clock controller
	mww 0x0021b020 0x00000015	
	# MPLL => 192 MHz
	mww 0x0021b004 0x07b32da5	
	mww 0x0021b008 0x00000000	
	# Reset MPLL
	mww 0x0021b000 0x0f20ac03	
	sleep 100	

	# SPLL => 96 MHz		
	mww 0x0021b00c 0x0fb32da5	
	mww 0x0021b010 0x00000000	
	# Reset SPLL
	mww 0x0021b000 0x0f40ac03	
	sleep 100			
	mww 0x0021b000 0x27000003	
	mww 0x0021b80c 0x000003ab

	# Enable CPU async clock source
	arm920t cp15 2 0xc0000078	
	
	# Setup Flash: remap CS0 to 0x1000000
	mww 0x00220000 0x00330e04
	mww 0x00220004 0x00000d01	

	# SDRAM setup 

	# SDRAM controller commands
	set PRE_ALL_CMD 0x10000000
	set AUTO_REF_CMD 0x20000000
	set SET_MODE_REG_CMD 0x30000000

	# 16 MB(4M * 32) memory config register values
	set SDCTL_BASE_VAL 0x810A9267
	set MODE_REG_VAL 0x00223000

	# Bank 0
	set SBANK_BASE 0x08000000
	set SDCTL 0x00221000

	# Precharge array
	mww $SDCTL [expr $SDCTL_BASE_VAL | $PRE_ALL_CMD]
	mdw $SBANK_BASE

	# Array in auto refresh mode	
	mww $SDCTL [expr $SDCTL_BASE_VAL | $AUTO_REF_CMD]
	# 8 refresh cycles	
	for { set i 0 } { $i < 8 } { incr i } {
		mdw $SBANK_BASE
	}
	
	# Write mode register
	mww $SDCTL [ expr $SDCTL_BASE_VAL | $SET_MODE_REG_CMD ] 
	mdw [ expr $SBANK_BASE | $MODE_REG_VAL ]

	# Switch to normal R/W mode
	mww $SDCTL $SDCTL_BASE_VAL
	
	# Switch back to a reasonable JTAG clock once the PLL is setup
	adapter_khz 6000
}
